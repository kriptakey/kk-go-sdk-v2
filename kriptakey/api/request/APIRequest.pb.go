// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: APIRequest.proto

package request

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type APIRequestLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Password    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestLogin) Reset() {
	*x = APIRequestLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestLogin) ProtoMessage() {}

func (x *APIRequestLogin) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestLogin.ProtoReflect.Descriptor instead.
func (*APIRequestLogin) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestLogin) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestLogin) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *APIRequestLogin) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestRefreshSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId       *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SessionToken *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	PartitionId  *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestRefreshSession) Reset() {
	*x = APIRequestRefreshSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestRefreshSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestRefreshSession) ProtoMessage() {}

func (x *APIRequestRefreshSession) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestRefreshSession.ProtoReflect.Descriptor instead.
func (*APIRequestRefreshSession) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestRefreshSession) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestRefreshSession) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *APIRequestRefreshSession) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestGenerateMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	HashAlgo    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data        []string                `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestGenerateMAC) Reset() {
	*x = APIRequestGenerateMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestGenerateMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestGenerateMAC) ProtoMessage() {}

func (x *APIRequestGenerateMAC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestGenerateMAC.ProtoReflect.Descriptor instead.
func (*APIRequestGenerateMAC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{2}
}

func (x *APIRequestGenerateMAC) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestGenerateMAC) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestGenerateMAC) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestGenerateMAC) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestGenerateMAC) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestGenerateMAC) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SingleVerifyMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Mac  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *SingleVerifyMAC) Reset() {
	*x = SingleVerifyMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleVerifyMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleVerifyMAC) ProtoMessage() {}

func (x *SingleVerifyMAC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleVerifyMAC.ProtoReflect.Descriptor instead.
func (*SingleVerifyMAC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{3}
}

func (x *SingleVerifyMAC) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SingleVerifyMAC) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *SingleVerifyMAC) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

type APIRequestVerifyMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	HashAlgo    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data        []*SingleVerifyMAC      `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestVerifyMAC) Reset() {
	*x = APIRequestVerifyMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestVerifyMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestVerifyMAC) ProtoMessage() {}

func (x *APIRequestVerifyMAC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestVerifyMAC.ProtoReflect.Descriptor instead.
func (*APIRequestVerifyMAC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{4}
}

func (x *APIRequestVerifyMAC) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestVerifyMAC) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestVerifyMAC) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestVerifyMAC) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestVerifyMAC) GetData() []*SingleVerifyMAC {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestVerifyMAC) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Aad               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	KeyId             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=keyId,proto3" json:"keyId,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
	KeyVersion        *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
}

func (x *APIRequestSingleDecrypt) Reset() {
	*x = APIRequestSingleDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleDecrypt) ProtoMessage() {}

func (x *APIRequestSingleDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequestSingleDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{5}
}

func (x *APIRequestSingleDecrypt) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

func (x *APIRequestSingleDecrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

type APIRequestDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value    `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Ciphertext  []*APIRequestSingleDecrypt `protobuf:"bytes,3,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId *wrapperspb.UInt32Value    `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestDecrypt) Reset() {
	*x = APIRequestDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestDecrypt) ProtoMessage() {}

func (x *APIRequestDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequestDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{6}
}

func (x *APIRequestDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestDecrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestDecrypt) GetCiphertext() []*APIRequestSingleDecrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleReEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Aad               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
	KeyVersion        *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
}

func (x *APIRequestSingleReEncrypt) Reset() {
	*x = APIRequestSingleReEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleReEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleReEncrypt) ProtoMessage() {}

func (x *APIRequestSingleReEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleReEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequestSingleReEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{7}
}

func (x *APIRequestSingleReEncrypt) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestSingleReEncrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequestSingleReEncrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequestSingleReEncrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequestSingleReEncrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

func (x *APIRequestSingleReEncrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

type APIRequestReEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId           *wrapperspb.UInt32Value      `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SourceKeyId      *wrapperspb.StringValue      `protobuf:"bytes,3,opt,name=sourceKeyId,proto3" json:"sourceKeyId,omitempty"`
	DestinationKeyId *wrapperspb.StringValue      `protobuf:"bytes,4,opt,name=destinationKeyId,proto3" json:"destinationKeyId,omitempty"`
	Ciphertext       []*APIRequestSingleReEncrypt `protobuf:"bytes,5,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId      *wrapperspb.UInt32Value      `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestReEncrypt) Reset() {
	*x = APIRequestReEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestReEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestReEncrypt) ProtoMessage() {}

func (x *APIRequestReEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestReEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequestReEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{8}
}

func (x *APIRequestReEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestReEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestReEncrypt) GetSourceKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.SourceKeyId
	}
	return nil
}

func (x *APIRequestReEncrypt) GetDestinationKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DestinationKeyId
	}
	return nil
}

func (x *APIRequestReEncrypt) GetCiphertext() []*APIRequestSingleReEncrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestReEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleTokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in APIRequest.proto.
	Text          *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FormatChar    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=formatChar,proto3" json:"formatChar,omitempty"`
	TokenizedWith *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=tokenizedWith,proto3" json:"tokenizedWith,omitempty"`
	Usv           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=usv,proto3" json:"usv,omitempty"`
}

func (x *APIRequestSingleTokenize) Reset() {
	*x = APIRequestSingleTokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleTokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleTokenize) ProtoMessage() {}

func (x *APIRequestSingleTokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleTokenize.ProtoReflect.Descriptor instead.
func (*APIRequestSingleTokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestSingleTokenize) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestSingleTokenize) GetFormatChar() *wrapperspb.StringValue {
	if x != nil {
		return x.FormatChar
	}
	return nil
}

func (x *APIRequestSingleTokenize) GetTokenizedWith() *wrapperspb.StringValue {
	if x != nil {
		return x.TokenizedWith
	}
	return nil
}

func (x *APIRequestSingleTokenize) GetUsv() *wrapperspb.StringValue {
	if x != nil {
		return x.Usv
	}
	return nil
}

type APIRequestTokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value     `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Plaintext   []*APIRequestSingleTokenize `protobuf:"bytes,4,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	PartitionId *wrapperspb.UInt32Value     `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestTokenize) Reset() {
	*x = APIRequestTokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestTokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestTokenize) ProtoMessage() {}

func (x *APIRequestTokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestTokenize.ProtoReflect.Descriptor instead.
func (*APIRequestTokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{10}
}

func (x *APIRequestTokenize) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestTokenize) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestTokenize) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestTokenize) GetPlaintext() []*APIRequestSingleTokenize {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestTokenize) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestDetokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value       `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Ciphertext  []*APIRequestSingleDetokenize `protobuf:"bytes,3,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId *wrapperspb.UInt32Value       `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestDetokenize) Reset() {
	*x = APIRequestDetokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestDetokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestDetokenize) ProtoMessage() {}

func (x *APIRequestDetokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestDetokenize.ProtoReflect.Descriptor instead.
func (*APIRequestDetokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{11}
}

func (x *APIRequestDetokenize) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestDetokenize) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestDetokenize) GetCiphertext() []*APIRequestSingleDetokenize {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestDetokenize) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	InputType       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=inputType,proto3" json:"inputType,omitempty"`
	HashAlgo        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	SignatureScheme *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=signatureScheme,proto3" json:"signatureScheme,omitempty"`
	Data            *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	PartitionId     *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestSign) Reset() {
	*x = APIRequestSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSign) ProtoMessage() {}

func (x *APIRequestSign) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSign.ProtoReflect.Descriptor instead.
func (*APIRequestSign) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{12}
}

func (x *APIRequestSign) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestSign) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestSign) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestSign) GetInputType() *wrapperspb.StringValue {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *APIRequestSign) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestSign) GetSignatureScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.SignatureScheme
	}
	return nil
}

func (x *APIRequestSign) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestSign) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId           *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	InputType       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=inputType,proto3" json:"inputType,omitempty"`
	HashAlgo        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	SignatureScheme *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=signatureScheme,proto3" json:"signatureScheme,omitempty"`
	Data            *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Signature       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	PartitionId     *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestVerify) Reset() {
	*x = APIRequestVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestVerify) ProtoMessage() {}

func (x *APIRequestVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestVerify.ProtoReflect.Descriptor instead.
func (*APIRequestVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{13}
}

func (x *APIRequestVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestVerify) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestVerify) GetInputType() *wrapperspb.StringValue {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *APIRequestVerify) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestVerify) GetSignatureScheme() *wrapperspb.StringValue {
	if x != nil {
		return x.SignatureScheme
	}
	return nil
}

func (x *APIRequestVerify) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestVerify) GetSignature() *wrapperspb.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *APIRequestVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestCertificateSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	ValidityPeriod *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=validityPeriod,proto3" json:"validityPeriod,omitempty"`
	KeyId          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Csr            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=csr,proto3" json:"csr,omitempty"`
	HashAlgo       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	PartitionId    *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestCertificateSign) Reset() {
	*x = APIRequestCertificateSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestCertificateSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestCertificateSign) ProtoMessage() {}

func (x *APIRequestCertificateSign) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestCertificateSign.ProtoReflect.Descriptor instead.
func (*APIRequestCertificateSign) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{14}
}

func (x *APIRequestCertificateSign) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestCertificateSign) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestCertificateSign) GetValidityPeriod() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ValidityPeriod
	}
	return nil
}

func (x *APIRequestCertificateSign) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestCertificateSign) GetCsr() *wrapperspb.StringValue {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *APIRequestCertificateSign) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestCertificateSign) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestCertificateVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Certificate *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestCertificateVerify) Reset() {
	*x = APIRequestCertificateVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestCertificateVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestCertificateVerify) ProtoMessage() {}

func (x *APIRequestCertificateVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestCertificateVerify.ProtoReflect.Descriptor instead.
func (*APIRequestCertificateVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{15}
}

func (x *APIRequestCertificateVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestCertificateVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestCertificateVerify) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestCertificateVerify) GetCertificate() *wrapperspb.StringValue {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *APIRequestCertificateVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestRNG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Length      *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=length,proto3" json:"length,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestRNG) Reset() {
	*x = APIRequestRNG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestRNG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestRNG) ProtoMessage() {}

func (x *APIRequestRNG) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestRNG.ProtoReflect.Descriptor instead.
func (*APIRequestRNG) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{16}
}

func (x *APIRequestRNG) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestRNG) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestRNG) GetLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *APIRequestRNG) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Plaintext   []string                `protobuf:"bytes,4,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestSeal) Reset() {
	*x = APIRequestSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSeal) ProtoMessage() {}

func (x *APIRequestSeal) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSeal.ProtoReflect.Descriptor instead.
func (*APIRequestSeal) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{17}
}

func (x *APIRequestSeal) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestSeal) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestSeal) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestSeal) GetPlaintext() []string {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestSeal) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestUnseal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Ciphertext  []string                `protobuf:"bytes,3,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestUnseal) Reset() {
	*x = APIRequestUnseal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestUnseal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestUnseal) ProtoMessage() {}

func (x *APIRequestUnseal) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestUnseal.ProtoReflect.Descriptor instead.
func (*APIRequestUnseal) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{18}
}

func (x *APIRequestUnseal) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestUnseal) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestUnseal) GetCiphertext() []string {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestUnseal) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Aad  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
}

func (x *APIRequestSingleEncrypt) Reset() {
	*x = APIRequestSingleEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleEncrypt) ProtoMessage() {}

func (x *APIRequestSingleEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequestSingleEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{19}
}

func (x *APIRequestSingleEncrypt) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestSingleEncrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

type APIRequestEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value    `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId         *wrapperspb.StringValue    `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Plaintext     []*APIRequestSingleEncrypt `protobuf:"bytes,4,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	UseSessionKey *wrapperspb.BoolValue      `protobuf:"bytes,5,opt,name=useSessionKey,proto3" json:"useSessionKey,omitempty"`
	PartitionId   *wrapperspb.UInt32Value    `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestEncrypt) Reset() {
	*x = APIRequestEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestEncrypt) ProtoMessage() {}

func (x *APIRequestEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequestEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{20}
}

func (x *APIRequestEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestEncrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestEncrypt) GetPlaintext() []*APIRequestSingleEncrypt {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestEncrypt) GetUseSessionKey() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseSessionKey
	}
	return nil
}

func (x *APIRequestEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestGetSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SecretId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=secretId,proto3" json:"secretId,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestGetSecret) Reset() {
	*x = APIRequestGetSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestGetSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestGetSecret) ProtoMessage() {}

func (x *APIRequestGetSecret) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestGetSecret.ProtoReflect.Descriptor instead.
func (*APIRequestGetSecret) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{21}
}

func (x *APIRequestGetSecret) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestGetSecret) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestGetSecret) GetSecretId() *wrapperspb.StringValue {
	if x != nil {
		return x.SecretId
	}
	return nil
}

func (x *APIRequestGetSecret) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	KeyVersion  *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestKeyInfo) Reset() {
	*x = APIRequestKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestKeyInfo) ProtoMessage() {}

func (x *APIRequestKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestKeyInfo.ProtoReflect.Descriptor instead.
func (*APIRequestKeyInfo) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{22}
}

func (x *APIRequestKeyInfo) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestKeyInfo) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestKeyInfo) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *APIRequestKeyInfo) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequestKeyInfo) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredGenerateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingMethod        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingMethod,proto3" json:"wrappingMethod,omitempty"`
	Algo                  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	AlgoLength            *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=algoLength,proto3" json:"algoLength,omitempty"`
	InternalWrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=internalWrappingKeyId,proto3" json:"internalWrappingKeyId,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	ExternalPublicKey  *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=externalPublicKey,proto3" json:"externalPublicKey,omitempty"`
	PartitionId        *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	AppstoredPublicKey *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=appstoredPublicKey,proto3" json:"appstoredPublicKey,omitempty"`
}

func (x *APIRequestAppstoredGenerateKey) Reset() {
	*x = APIRequestAppstoredGenerateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredGenerateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredGenerateKey) ProtoMessage() {}

func (x *APIRequestAppstoredGenerateKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredGenerateKey.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredGenerateKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{23}
}

func (x *APIRequestAppstoredGenerateKey) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredGenerateKey) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetWrappingMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingMethod
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetAlgoLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AlgoLength
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetInternalWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.InternalWrappingKeyId
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredGenerateKey) GetExternalPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ExternalPublicKey
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKey) GetAppstoredPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AppstoredPublicKey
	}
	return nil
}

type APIRequestAppstoredGenerateKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingMethod *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingMethod,proto3" json:"wrappingMethod,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	ExternalPublicKeyOrWrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=externalPublicKeyOrWrappingKeyId,proto3" json:"externalPublicKeyOrWrappingKeyId,omitempty"`
	Algo                             *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=algo,proto3" json:"algo,omitempty"`
	AlgoLength                       *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=algoLength,proto3" json:"algoLength,omitempty"`
	WithCert                         *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=withCert,proto3" json:"withCert,omitempty"`
	PartitionId                      *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	InternalWrappingKeyId            *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=internalWrappingKeyId,proto3" json:"internalWrappingKeyId,omitempty"`
	AppstoredPublicKey               *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=appstoredPublicKey,proto3" json:"appstoredPublicKey,omitempty"`
}

func (x *APIRequestAppstoredGenerateKeyPair) Reset() {
	*x = APIRequestAppstoredGenerateKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredGenerateKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredGenerateKeyPair) ProtoMessage() {}

func (x *APIRequestAppstoredGenerateKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredGenerateKeyPair.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredGenerateKeyPair) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{24}
}

func (x *APIRequestAppstoredGenerateKeyPair) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredGenerateKeyPair) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetWrappingMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingMethod
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredGenerateKeyPair) GetExternalPublicKeyOrWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.ExternalPublicKeyOrWrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetAlgoLength() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AlgoLength
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetWithCert() *wrapperspb.BoolValue {
	if x != nil {
		return x.WithCert
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetInternalWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.InternalWrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateKeyPair) GetAppstoredPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AppstoredPublicKey
	}
	return nil
}

type APIRequestAppstoredGenerateMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	HashAlgo      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredGenerateMAC) Reset() {
	*x = APIRequestAppstoredGenerateMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredGenerateMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredGenerateMAC) ProtoMessage() {}

func (x *APIRequestAppstoredGenerateMAC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredGenerateMAC.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredGenerateMAC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{25}
}

func (x *APIRequestAppstoredGenerateMAC) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredGenerateMAC) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateMAC) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredGenerateMAC) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredGenerateMAC) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestAppstoredGenerateMAC) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestAppstoredGenerateMAC) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredVerifyMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	HashAlgo      *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Mac           *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv            *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=iv,proto3" json:"iv,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredVerifyMAC) Reset() {
	*x = APIRequestAppstoredVerifyMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredVerifyMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredVerifyMAC) ProtoMessage() {}

func (x *APIRequestAppstoredVerifyMAC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredVerifyMAC.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredVerifyMAC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{26}
}

func (x *APIRequestAppstoredVerifyMAC) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredVerifyMAC) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequestAppstoredVerifyMAC) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredTokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value     `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue     `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Plaintext     []*APIRequestSingleTokenize `protobuf:"bytes,5,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	PartitionId   *wrapperspb.UInt32Value     `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredTokenize) Reset() {
	*x = APIRequestAppstoredTokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredTokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredTokenize) ProtoMessage() {}

func (x *APIRequestAppstoredTokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredTokenize.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredTokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{27}
}

func (x *APIRequestAppstoredTokenize) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredTokenize) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredTokenize) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredTokenize) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredTokenize) GetPlaintext() []*APIRequestSingleTokenize {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestAppstoredTokenize) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	InputType     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=inputType,proto3" json:"inputType,omitempty"`
	HashAlgo      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredSign) Reset() {
	*x = APIRequestAppstoredSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredSign) ProtoMessage() {}

func (x *APIRequestAppstoredSign) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredSign.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredSign) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{28}
}

func (x *APIRequestAppstoredSign) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredSign) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetInputType() *wrapperspb.StringValue {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestAppstoredSign) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	PublicKeyOrCert *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=publicKeyOrCert,proto3" json:"publicKeyOrCert,omitempty"`
	InputType       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=inputType,proto3" json:"inputType,omitempty"`
	HashAlgo        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=hashAlgo,proto3" json:"hashAlgo,omitempty"`
	Data            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Signature       *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	PartitionId     *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredVerify) Reset() {
	*x = APIRequestAppstoredVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredVerify) ProtoMessage() {}

func (x *APIRequestAppstoredVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredVerify.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{29}
}

func (x *APIRequestAppstoredVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetPublicKeyOrCert() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicKeyOrCert
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetInputType() *wrapperspb.StringValue {
	if x != nil {
		return x.InputType
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetHashAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.HashAlgo
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetSignature() *wrapperspb.StringValue {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *APIRequestAppstoredVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredSeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	PublicKeyOrCert *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=publicKeyOrCert,proto3" json:"publicKeyOrCert,omitempty"`
	Plaintext       []string                `protobuf:"bytes,6,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	PartitionId     *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredSeal) Reset() {
	*x = APIRequestAppstoredSeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredSeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredSeal) ProtoMessage() {}

func (x *APIRequestAppstoredSeal) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredSeal.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredSeal) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{30}
}

func (x *APIRequestAppstoredSeal) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredSeal) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredSeal) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredSeal) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredSeal) GetPublicKeyOrCert() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicKeyOrCert
	}
	return nil
}

func (x *APIRequestAppstoredSeal) GetPlaintext() []string {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestAppstoredSeal) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredUnseal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Ciphertext    []string                `protobuf:"bytes,5,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredUnseal) Reset() {
	*x = APIRequestAppstoredUnseal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredUnseal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredUnseal) ProtoMessage() {}

func (x *APIRequestAppstoredUnseal) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredUnseal.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredUnseal) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{31}
}

func (x *APIRequestAppstoredUnseal) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredUnseal) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredUnseal) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredUnseal) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredUnseal) GetCiphertext() []string {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestAppstoredUnseal) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestAppstoredEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId          *wrapperspb.UInt32Value    `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId   *wrapperspb.StringValue    `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey      *wrapperspb.StringValue    `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Plaintext       []*APIRequestSingleEncrypt `protobuf:"bytes,5,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
	PublicKeyOrCert *wrapperspb.StringValue    `protobuf:"bytes,6,opt,name=publicKeyOrCert,proto3" json:"publicKeyOrCert,omitempty"`
	UseSessionKey   *wrapperspb.BoolValue      `protobuf:"bytes,7,opt,name=useSessionKey,proto3" json:"useSessionKey,omitempty"`
	PartitionId     *wrapperspb.UInt32Value    `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredEncrypt) Reset() {
	*x = APIRequestAppstoredEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredEncrypt) ProtoMessage() {}

func (x *APIRequestAppstoredEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{32}
}

func (x *APIRequestAppstoredEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetPlaintext() []*APIRequestSingleEncrypt {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetPublicKeyOrCert() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicKeyOrCert
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetUseSessionKey() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseSessionKey
	}
	return nil
}

func (x *APIRequestAppstoredEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleAppstoredDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Aad               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
	KeyVersion        *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
}

func (x *APIRequestSingleAppstoredDecrypt) Reset() {
	*x = APIRequestSingleAppstoredDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleAppstoredDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleAppstoredDecrypt) ProtoMessage() {}

func (x *APIRequestSingleAppstoredDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleAppstoredDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequestSingleAppstoredDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{33}
}

func (x *APIRequestSingleAppstoredDecrypt) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestSingleAppstoredDecrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequestSingleAppstoredDecrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequestSingleAppstoredDecrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequestSingleAppstoredDecrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

func (x *APIRequestSingleAppstoredDecrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

type APIRequestAppstoredDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value             `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue             `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue             `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Ciphertext    []*APIRequestSingleAppstoredDecrypt `protobuf:"bytes,5,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId   *wrapperspb.UInt32Value             `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredDecrypt) Reset() {
	*x = APIRequestAppstoredDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredDecrypt) ProtoMessage() {}

func (x *APIRequestAppstoredDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{34}
}

func (x *APIRequestAppstoredDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredDecrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredDecrypt) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredDecrypt) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredDecrypt) GetCiphertext() []*APIRequestSingleAppstoredDecrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestAppstoredDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestSingleDetokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Metadata *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *APIRequestSingleDetokenize) Reset() {
	*x = APIRequestSingleDetokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestSingleDetokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestSingleDetokenize) ProtoMessage() {}

func (x *APIRequestSingleDetokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestSingleDetokenize.ProtoReflect.Descriptor instead.
func (*APIRequestSingleDetokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{35}
}

func (x *APIRequestSingleDetokenize) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *APIRequestSingleDetokenize) GetMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type APIRequestAppstoredDetokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value       `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId *wrapperspb.StringValue       `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedKey    *wrapperspb.StringValue       `protobuf:"bytes,4,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Ciphertext    []*APIRequestSingleDetokenize `protobuf:"bytes,5,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId   *wrapperspb.UInt32Value       `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestAppstoredDetokenize) Reset() {
	*x = APIRequestAppstoredDetokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestAppstoredDetokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestAppstoredDetokenize) ProtoMessage() {}

func (x *APIRequestAppstoredDetokenize) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestAppstoredDetokenize.ProtoReflect.Descriptor instead.
func (*APIRequestAppstoredDetokenize) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{36}
}

func (x *APIRequestAppstoredDetokenize) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestAppstoredDetokenize) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestAppstoredDetokenize) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestAppstoredDetokenize) GetWrappedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *APIRequestAppstoredDetokenize) GetCiphertext() []*APIRequestSingleDetokenize {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestAppstoredDetokenize) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type E2EESourceCipher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedPrivateKey *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=wrappedPrivateKey,proto3" json:"wrappedPrivateKey,omitempty"`
	SessionKeyAlgo    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=sessionKeyAlgo,proto3" json:"sessionKeyAlgo,omitempty"`
	MacAlgo           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=macAlgo,proto3" json:"macAlgo,omitempty"`
	OaepLabel         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=oaepLabel,proto3" json:"oaepLabel,omitempty"`
	Metadata          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Ciphertext        []string                `protobuf:"bytes,7,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId       *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *E2EESourceCipher) Reset() {
	*x = E2EESourceCipher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2EESourceCipher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2EESourceCipher) ProtoMessage() {}

func (x *E2EESourceCipher) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2EESourceCipher.ProtoReflect.Descriptor instead.
func (*E2EESourceCipher) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{37}
}

func (x *E2EESourceCipher) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *E2EESourceCipher) GetWrappedPrivateKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedPrivateKey
	}
	return nil
}

func (x *E2EESourceCipher) GetSessionKeyAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionKeyAlgo
	}
	return nil
}

func (x *E2EESourceCipher) GetMacAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.MacAlgo
	}
	return nil
}

func (x *E2EESourceCipher) GetOaepLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OaepLabel
	}
	return nil
}

func (x *E2EESourceCipher) GetMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *E2EESourceCipher) GetCiphertext() []string {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *E2EESourceCipher) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestE2EEReencryptFromSessionKeyToPermanentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value                                          `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Source      *E2EESourceCipher                                                `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Destination *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	PartitionId *wrapperspb.UInt32Value                                          `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) Reset() {
	*x = APIRequestE2EEReencryptFromSessionKeyToPermanentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEReencryptFromSessionKeyToPermanentKey) ProtoMessage() {}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEReencryptFromSessionKeyToPermanentKey.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEReencryptFromSessionKeyToPermanentKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{38}
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) GetSource() *E2EESourceCipher {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) GetDestination() *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestE2EECiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Mac  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *APIRequestE2EECiphertext) Reset() {
	*x = APIRequestE2EECiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EECiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EECiphertext) ProtoMessage() {}

func (x *APIRequestE2EECiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EECiphertext.ProtoReflect.Descriptor instead.
func (*APIRequestE2EECiphertext) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{39}
}

func (x *APIRequestE2EECiphertext) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequestE2EECiphertext) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequestE2EECiphertext) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

type APIRequestE2EECompare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value            `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Source      *E2EESourceCipher                  `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	CompareWith *APIRequestE2EECompare_Comparewith `protobuf:"bytes,4,opt,name=compareWith,proto3" json:"compareWith,omitempty"`
	PartitionId *wrapperspb.UInt32Value            `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestE2EECompare) Reset() {
	*x = APIRequestE2EECompare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EECompare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EECompare) ProtoMessage() {}

func (x *APIRequestE2EECompare) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EECompare.ProtoReflect.Descriptor instead.
func (*APIRequestE2EECompare) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{40}
}

func (x *APIRequestE2EECompare) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestE2EECompare) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestE2EECompare) GetSource() *E2EESourceCipher {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *APIRequestE2EECompare) GetCompareWith() *APIRequestE2EECompare_Comparewith {
	if x != nil {
		return x.CompareWith
	}
	return nil
}

func (x *APIRequestE2EECompare) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestE2EEReencryptFromPermanentKeyToClientKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value                                         `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Source      *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source      `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Destination *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	PartitionId *wrapperspb.UInt32Value                                         `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) Reset() {
	*x = APIRequestE2EEReencryptFromPermanentKeyToClientKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey) ProtoMessage() {}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEReencryptFromPermanentKeyToClientKey.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{41}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) GetSource() *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) GetDestination() *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestE2EEDecryptFromSessionKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId            *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	WrappingKeyId     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedPrivateKey *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=wrappedPrivateKey,proto3" json:"wrappedPrivateKey,omitempty"`
	SessionKeyAlgo    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=sessionKeyAlgo,proto3" json:"sessionKeyAlgo,omitempty"`
	MacAlgo           *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=macAlgo,proto3" json:"macAlgo,omitempty"`
	OaepLabel         *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=oaepLabel,proto3" json:"oaepLabel,omitempty"`
	Metadata          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Ciphertext        []string                `protobuf:"bytes,9,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	PartitionId       *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestE2EEDecryptFromSessionKey) Reset() {
	*x = APIRequestE2EEDecryptFromSessionKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEDecryptFromSessionKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEDecryptFromSessionKey) ProtoMessage() {}

func (x *APIRequestE2EEDecryptFromSessionKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEDecryptFromSessionKey.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEDecryptFromSessionKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{42}
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestE2EEDecryptFromSessionKey) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetWrappedPrivateKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedPrivateKey
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetSessionKeyAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionKeyAlgo
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetMacAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.MacAlgo
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetOaepLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.OaepLabel
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetCiphertext() []string {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *APIRequestE2EEDecryptFromSessionKey) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type APIRequestE2EEEncryptToClientKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value                       `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Source      *APIRequestE2EEEncryptToClientKey_Source      `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Destination *APIRequestE2EEEncryptToClientKey_Destination `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	PartitionId *wrapperspb.UInt32Value                       `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *APIRequestE2EEEncryptToClientKey) Reset() {
	*x = APIRequestE2EEEncryptToClientKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEEncryptToClientKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEEncryptToClientKey) ProtoMessage() {}

func (x *APIRequestE2EEEncryptToClientKey) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEEncryptToClientKey.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEEncryptToClientKey) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{43}
}

func (x *APIRequestE2EEEncryptToClientKey) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *APIRequestE2EEEncryptToClientKey) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey) GetSource() *APIRequestE2EEEncryptToClientKey_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey) GetDestination() *APIRequestE2EEEncryptToClientKey_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are assignable to ClientCertificateObject:
	//
	//	*SDKRequestConnection_ClientCertificatePath
	//	*SDKRequestConnection_ClientCertificatePEM
	ClientCertificateObject isSDKRequestConnection_ClientCertificateObject `protobuf_oneof:"clientCertificateObject"`
	// Types that are assignable to PrivateKeyObject:
	//
	//	*SDKRequestConnection_PrivateKeyPath
	//	*SDKRequestConnection_PrivateKeyPEM
	PrivateKeyObject isSDKRequestConnection_PrivateKeyObject `protobuf_oneof:"privateKeyObject"`
}

func (x *SDKRequestConnection) Reset() {
	*x = SDKRequestConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestConnection) ProtoMessage() {}

func (x *SDKRequestConnection) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestConnection.ProtoReflect.Descriptor instead.
func (*SDKRequestConnection) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{44}
}

func (x *SDKRequestConnection) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SDKRequestConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (m *SDKRequestConnection) GetClientCertificateObject() isSDKRequestConnection_ClientCertificateObject {
	if m != nil {
		return m.ClientCertificateObject
	}
	return nil
}

func (x *SDKRequestConnection) GetClientCertificatePath() string {
	if x, ok := x.GetClientCertificateObject().(*SDKRequestConnection_ClientCertificatePath); ok {
		return x.ClientCertificatePath
	}
	return ""
}

func (x *SDKRequestConnection) GetClientCertificatePEM() string {
	if x, ok := x.GetClientCertificateObject().(*SDKRequestConnection_ClientCertificatePEM); ok {
		return x.ClientCertificatePEM
	}
	return ""
}

func (m *SDKRequestConnection) GetPrivateKeyObject() isSDKRequestConnection_PrivateKeyObject {
	if m != nil {
		return m.PrivateKeyObject
	}
	return nil
}

func (x *SDKRequestConnection) GetPrivateKeyPath() string {
	if x, ok := x.GetPrivateKeyObject().(*SDKRequestConnection_PrivateKeyPath); ok {
		return x.PrivateKeyPath
	}
	return ""
}

func (x *SDKRequestConnection) GetPrivateKeyPEM() string {
	if x, ok := x.GetPrivateKeyObject().(*SDKRequestConnection_PrivateKeyPEM); ok {
		return x.PrivateKeyPEM
	}
	return ""
}

type isSDKRequestConnection_ClientCertificateObject interface {
	isSDKRequestConnection_ClientCertificateObject()
}

type SDKRequestConnection_ClientCertificatePath struct {
	ClientCertificatePath string `protobuf:"bytes,3,opt,name=clientCertificatePath,proto3,oneof"`
}

type SDKRequestConnection_ClientCertificatePEM struct {
	ClientCertificatePEM string `protobuf:"bytes,4,opt,name=clientCertificatePEM,proto3,oneof"`
}

func (*SDKRequestConnection_ClientCertificatePath) isSDKRequestConnection_ClientCertificateObject() {}

func (*SDKRequestConnection_ClientCertificatePEM) isSDKRequestConnection_ClientCertificateObject() {}

type isSDKRequestConnection_PrivateKeyObject interface {
	isSDKRequestConnection_PrivateKeyObject()
}

type SDKRequestConnection_PrivateKeyPath struct {
	PrivateKeyPath string `protobuf:"bytes,5,opt,name=privateKeyPath,proto3,oneof"`
}

type SDKRequestConnection_PrivateKeyPEM struct {
	PrivateKeyPEM string `protobuf:"bytes,6,opt,name=privateKeyPEM,proto3,oneof"`
}

func (*SDKRequestConnection_PrivateKeyPath) isSDKRequestConnection_PrivateKeyObject() {}

func (*SDKRequestConnection_PrivateKeyPEM) isSDKRequestConnection_PrivateKeyObject() {}

type SDKRequestGeneral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareVersion []byte `protobuf:"bytes,1,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SoftwareSandboxMode   bool   `protobuf:"varint,2,opt,name=softwareSandboxMode,proto3" json:"softwareSandboxMode,omitempty"`
	GeneralRequestPayload []byte `protobuf:"bytes,3,opt,name=generalRequestPayload,proto3" json:"generalRequestPayload,omitempty"`
	Command               uint32 `protobuf:"varint,4,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *SDKRequestGeneral) Reset() {
	*x = SDKRequestGeneral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestGeneral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestGeneral) ProtoMessage() {}

func (x *SDKRequestGeneral) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestGeneral.ProtoReflect.Descriptor instead.
func (*SDKRequestGeneral) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{45}
}

func (x *SDKRequestGeneral) GetSoftwareVersion() []byte {
	if x != nil {
		return x.SoftwareVersion
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestGeneral) GetSoftwareSandboxMode() bool {
	if x != nil {
		return x.SoftwareSandboxMode
	}
	return false
}

func (x *SDKRequestGeneral) GetGeneralRequestPayload() []byte {
	if x != nil {
		return x.GeneralRequestPayload
	}
	return nil
}

func (x *SDKRequestGeneral) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

type SDKRequestInitEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestInitEncrypt) Reset() {
	*x = SDKRequestInitEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestInitEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestInitEncrypt) ProtoMessage() {}

func (x *SDKRequestInitEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestInitEncrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestInitEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{46}
}

func (x *SDKRequestInitEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestInitEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestInitEncrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestInitEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestInitDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	KeyVersion  *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Iv          []byte                  `protobuf:"bytes,5,opt,name=iv,proto3,oneof" json:"iv,omitempty"`
	Tag         []byte                  `protobuf:"bytes,6,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestInitDecrypt) Reset() {
	*x = SDKRequestInitDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestInitDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestInitDecrypt) ProtoMessage() {}

func (x *SDKRequestInitDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestInitDecrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestInitDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{47}
}

func (x *SDKRequestInitDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestInitDecrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestInitDecrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestInitDecrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *SDKRequestInitDecrypt) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *SDKRequestInitDecrypt) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SDKRequestInitDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                       *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Message                      []byte                  `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	SerializedAES256CBCProcessor []byte                  `protobuf:"bytes,4,opt,name=serializedAES256CBCProcessor,proto3,oneof" json:"serializedAES256CBCProcessor,omitempty"`
	PartitionId                  *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartUpdate) Reset() {
	*x = SDKRequestMultipartUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartUpdate) ProtoMessage() {}

func (x *SDKRequestMultipartUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartUpdate.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartUpdate) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{48}
}

func (x *SDKRequestMultipartUpdate) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartUpdate) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartUpdate) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SDKRequestMultipartUpdate) GetSerializedAES256CBCProcessor() []byte {
	if x != nil {
		return x.SerializedAES256CBCProcessor
	}
	return nil
}

func (x *SDKRequestMultipartUpdate) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestFinalizeEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                       *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SerializedAES256CBCProcessor []byte                  `protobuf:"bytes,3,opt,name=serializedAES256CBCProcessor,proto3,oneof" json:"serializedAES256CBCProcessor,omitempty"`
	PartitionId                  *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestFinalizeEncrypt) Reset() {
	*x = SDKRequestFinalizeEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestFinalizeEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestFinalizeEncrypt) ProtoMessage() {}

func (x *SDKRequestFinalizeEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestFinalizeEncrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestFinalizeEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{49}
}

func (x *SDKRequestFinalizeEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestFinalizeEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestFinalizeEncrypt) GetSerializedAES256CBCProcessor() []byte {
	if x != nil {
		return x.SerializedAES256CBCProcessor
	}
	return nil
}

func (x *SDKRequestFinalizeEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestFinalizeDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                       *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SerializedAES256CBCProcessor []byte                  `protobuf:"bytes,3,opt,name=serializedAES256CBCProcessor,proto3,oneof" json:"serializedAES256CBCProcessor,omitempty"`
	PartitionId                  *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestFinalizeDecrypt) Reset() {
	*x = SDKRequestFinalizeDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestFinalizeDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestFinalizeDecrypt) ProtoMessage() {}

func (x *SDKRequestFinalizeDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestFinalizeDecrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestFinalizeDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{50}
}

func (x *SDKRequestFinalizeDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestFinalizeDecrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestFinalizeDecrypt) GetSerializedAES256CBCProcessor() []byte {
	if x != nil {
		return x.SerializedAES256CBCProcessor
	}
	return nil
}

func (x *SDKRequestFinalizeDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestDecryptCBC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	KeyVersion  *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Iv          []byte                  `protobuf:"bytes,5,opt,name=iv,proto3,oneof" json:"iv,omitempty"`
	Ciphertext  []byte                  `protobuf:"bytes,6,opt,name=ciphertext,proto3,oneof" json:"ciphertext,omitempty"`
	SequenceId  *wrapperspb.UInt32Value `protobuf:"bytes,7,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	IsLastchunk *wrapperspb.BoolValue   `protobuf:"bytes,8,opt,name=isLastchunk,proto3" json:"isLastchunk,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestDecryptCBC) Reset() {
	*x = SDKRequestDecryptCBC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestDecryptCBC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestDecryptCBC) ProtoMessage() {}

func (x *SDKRequestDecryptCBC) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestDecryptCBC.ProtoReflect.Descriptor instead.
func (*SDKRequestDecryptCBC) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{51}
}

func (x *SDKRequestDecryptCBC) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestDecryptCBC) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetSequenceId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SequenceId
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetIsLastchunk() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsLastchunk
	}
	return nil
}

func (x *SDKRequestDecryptCBC) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestInitMACGenerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestInitMACGenerate) Reset() {
	*x = SDKRequestInitMACGenerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestInitMACGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestInitMACGenerate) ProtoMessage() {}

func (x *SDKRequestInitMACGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestInitMACGenerate.ProtoReflect.Descriptor instead.
func (*SDKRequestInitMACGenerate) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{52}
}

func (x *SDKRequestInitMACGenerate) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestInitMACGenerate) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestInitMACGenerate) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestInitMACGenerate) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestInitMACVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId      *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PartitionId *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestInitMACVerify) Reset() {
	*x = SDKRequestInitMACVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestInitMACVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestInitMACVerify) ProtoMessage() {}

func (x *SDKRequestInitMACVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestInitMACVerify.ProtoReflect.Descriptor instead.
func (*SDKRequestInitMACVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{53}
}

func (x *SDKRequestInitMACVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestInitMACVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestInitMACVerify) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestInitMACVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartMACUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	Message                       []byte                  `protobuf:"bytes,3,opt,name=message,proto3,oneof" json:"message,omitempty"`
	SerializedHMACSHA256Processor []byte                  `protobuf:"bytes,4,opt,name=serializedHMACSHA256Processor,proto3,oneof" json:"serializedHMACSHA256Processor,omitempty"`
	PartitionId                   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartMACUpdate) Reset() {
	*x = SDKRequestMultipartMACUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartMACUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartMACUpdate) ProtoMessage() {}

func (x *SDKRequestMultipartMACUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartMACUpdate.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartMACUpdate) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{54}
}

func (x *SDKRequestMultipartMACUpdate) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartMACUpdate) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartMACUpdate) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SDKRequestMultipartMACUpdate) GetSerializedHMACSHA256Processor() []byte {
	if x != nil {
		return x.SerializedHMACSHA256Processor
	}
	return nil
}

func (x *SDKRequestMultipartMACUpdate) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestFinalizeMACGenerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SerializedHMACSHA256Processor []byte                  `protobuf:"bytes,3,opt,name=serializedHMACSHA256Processor,proto3,oneof" json:"serializedHMACSHA256Processor,omitempty"`
	PartitionId                   *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestFinalizeMACGenerate) Reset() {
	*x = SDKRequestFinalizeMACGenerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestFinalizeMACGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestFinalizeMACGenerate) ProtoMessage() {}

func (x *SDKRequestFinalizeMACGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestFinalizeMACGenerate.ProtoReflect.Descriptor instead.
func (*SDKRequestFinalizeMACGenerate) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{55}
}

func (x *SDKRequestFinalizeMACGenerate) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestFinalizeMACGenerate) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestFinalizeMACGenerate) GetSerializedHMACSHA256Processor() []byte {
	if x != nil {
		return x.SerializedHMACSHA256Processor
	}
	return nil
}

func (x *SDKRequestFinalizeMACGenerate) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestFinalizeMACVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId                        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	SerializedHMACSHA256Processor []byte                  `protobuf:"bytes,3,opt,name=serializedHMACSHA256Processor,proto3,oneof" json:"serializedHMACSHA256Processor,omitempty"`
	Tag                           []byte                  `protobuf:"bytes,4,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	PartitionId                   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestFinalizeMACVerify) Reset() {
	*x = SDKRequestFinalizeMACVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestFinalizeMACVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestFinalizeMACVerify) ProtoMessage() {}

func (x *SDKRequestFinalizeMACVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestFinalizeMACVerify.ProtoReflect.Descriptor instead.
func (*SDKRequestFinalizeMACVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{56}
}

func (x *SDKRequestFinalizeMACVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestFinalizeMACVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestFinalizeMACVerify) GetSerializedHMACSHA256Processor() []byte {
	if x != nil {
		return x.SerializedHMACSHA256Processor
	}
	return nil
}

func (x *SDKRequestFinalizeMACVerify) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SDKRequestFinalizeMACVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId               *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId                *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PlaintextInputFile   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=plaintextInputFile,proto3" json:"plaintextInputFile,omitempty"`
	CiphertextOutputFile *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ciphertextOutputFile,proto3" json:"ciphertextOutputFile,omitempty"`
	PartitionId          *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartEncrypt) Reset() {
	*x = SDKRequestMultipartEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartEncrypt) ProtoMessage() {}

func (x *SDKRequestMultipartEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartEncrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{57}
}

func (x *SDKRequestMultipartEncrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartEncrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartEncrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestMultipartEncrypt) GetPlaintextInputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.PlaintextInputFile
	}
	return nil
}

func (x *SDKRequestMultipartEncrypt) GetCiphertextOutputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CiphertextOutputFile
	}
	return nil
}

func (x *SDKRequestMultipartEncrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId              *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	KeyVersion          *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Iv                  []byte                  `protobuf:"bytes,5,opt,name=iv,proto3,oneof" json:"iv,omitempty"`
	Tag                 []byte                  `protobuf:"bytes,6,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	CiphertextInputFile *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ciphertextInputFile,proto3" json:"ciphertextInputFile,omitempty"`
	PlaintextOutputFile *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=plaintextOutputFile,proto3" json:"plaintextOutputFile,omitempty"`
	PartitionId         *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartDecrypt) Reset() {
	*x = SDKRequestMultipartDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartDecrypt) ProtoMessage() {}

func (x *SDKRequestMultipartDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartDecrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{58}
}

func (x *SDKRequestMultipartDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartDecrypt) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetCiphertextInputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CiphertextInputFile
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetPlaintextOutputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.PlaintextOutputFile
	}
	return nil
}

func (x *SDKRequestMultipartDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartHMACGenerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	InputFilename *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=inputFilename,proto3" json:"inputFilename,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartHMACGenerate) Reset() {
	*x = SDKRequestMultipartHMACGenerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartHMACGenerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartHMACGenerate) ProtoMessage() {}

func (x *SDKRequestMultipartHMACGenerate) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartHMACGenerate.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartHMACGenerate) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{59}
}

func (x *SDKRequestMultipartHMACGenerate) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartHMACGenerate) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartHMACGenerate) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestMultipartHMACGenerate) GetInputFilename() *wrapperspb.StringValue {
	if x != nil {
		return x.InputFilename
	}
	return nil
}

func (x *SDKRequestMultipartHMACGenerate) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestMultipartHMACVerify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// Deprecated: Marked as deprecated in APIRequest.proto.
	SlotId        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=slotId,proto3" json:"slotId,omitempty"`
	KeyId         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	InputFilename *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=inputFilename,proto3" json:"inputFilename,omitempty"`
	Tag           []byte                  `protobuf:"bytes,5,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	PartitionId   *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
}

func (x *SDKRequestMultipartHMACVerify) Reset() {
	*x = SDKRequestMultipartHMACVerify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestMultipartHMACVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestMultipartHMACVerify) ProtoMessage() {}

func (x *SDKRequestMultipartHMACVerify) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestMultipartHMACVerify.ProtoReflect.Descriptor instead.
func (*SDKRequestMultipartHMACVerify) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{60}
}

func (x *SDKRequestMultipartHMACVerify) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

// Deprecated: Marked as deprecated in APIRequest.proto.
func (x *SDKRequestMultipartHMACVerify) GetSlotId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SlotId
	}
	return nil
}

func (x *SDKRequestMultipartHMACVerify) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestMultipartHMACVerify) GetInputFilename() *wrapperspb.StringValue {
	if x != nil {
		return x.InputFilename
	}
	return nil
}

func (x *SDKRequestMultipartHMACVerify) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SDKRequestMultipartHMACVerify) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

type SDKRequestSealForTransit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plaintext       []byte `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	PublicKeyOrCert string `protobuf:"bytes,2,opt,name=publicKeyOrCert,proto3" json:"publicKeyOrCert,omitempty"`
}

func (x *SDKRequestSealForTransit) Reset() {
	*x = SDKRequestSealForTransit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestSealForTransit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestSealForTransit) ProtoMessage() {}

func (x *SDKRequestSealForTransit) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestSealForTransit.ProtoReflect.Descriptor instead.
func (*SDKRequestSealForTransit) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{61}
}

func (x *SDKRequestSealForTransit) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *SDKRequestSealForTransit) GetPublicKeyOrCert() string {
	if x != nil {
		return x.PublicKeyOrCert
	}
	return ""
}

type SDKRequestUnSealFromTransit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId       uint32 `protobuf:"varint,1,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	SessionToken      string `protobuf:"bytes,2,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	WrappingKeyId     string `protobuf:"bytes,3,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedPrivateKey string `protobuf:"bytes,4,opt,name=wrappedPrivateKey,proto3" json:"wrappedPrivateKey,omitempty"`
	Ciphertext        []byte `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *SDKRequestUnSealFromTransit) Reset() {
	*x = SDKRequestUnSealFromTransit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestUnSealFromTransit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestUnSealFromTransit) ProtoMessage() {}

func (x *SDKRequestUnSealFromTransit) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestUnSealFromTransit.ProtoReflect.Descriptor instead.
func (*SDKRequestUnSealFromTransit) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{62}
}

func (x *SDKRequestUnSealFromTransit) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *SDKRequestUnSealFromTransit) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *SDKRequestUnSealFromTransit) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *SDKRequestUnSealFromTransit) GetWrappedPrivateKey() string {
	if x != nil {
		return x.WrappedPrivateKey
	}
	return ""
}

func (x *SDKRequestUnSealFromTransit) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type SDKRequestOfflineEncryptionDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	PartitionId         *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	KeyId               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	CiphertextInputFile *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=ciphertextInputFile,proto3" json:"ciphertextInputFile,omitempty"`
	PlaintextOutputFile *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=plaintextOutputFile,proto3" json:"plaintextOutputFile,omitempty"`
}

func (x *SDKRequestOfflineEncryptionDecrypt) Reset() {
	*x = SDKRequestOfflineEncryptionDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestOfflineEncryptionDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestOfflineEncryptionDecrypt) ProtoMessage() {}

func (x *SDKRequestOfflineEncryptionDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestOfflineEncryptionDecrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestOfflineEncryptionDecrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{63}
}

func (x *SDKRequestOfflineEncryptionDecrypt) GetSessionToken() *wrapperspb.StringValue {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *SDKRequestOfflineEncryptionDecrypt) GetPartitionId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PartitionId
	}
	return nil
}

func (x *SDKRequestOfflineEncryptionDecrypt) GetKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.KeyId
	}
	return nil
}

func (x *SDKRequestOfflineEncryptionDecrypt) GetCiphertextInputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CiphertextInputFile
	}
	return nil
}

func (x *SDKRequestOfflineEncryptionDecrypt) GetPlaintextOutputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.PlaintextOutputFile
	}
	return nil
}

type SDKRequestOfflineEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaintextInputFile   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=plaintextInputFile,proto3" json:"plaintextInputFile,omitempty"`
	CiphertextOutputFile *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ciphertextOutputFile,proto3" json:"ciphertextOutputFile,omitempty"`
	PublicKeyOrCert      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=publicKeyOrCert,proto3" json:"publicKeyOrCert,omitempty"`
}

func (x *SDKRequestOfflineEncrypt) Reset() {
	*x = SDKRequestOfflineEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDKRequestOfflineEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDKRequestOfflineEncrypt) ProtoMessage() {}

func (x *SDKRequestOfflineEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDKRequestOfflineEncrypt.ProtoReflect.Descriptor instead.
func (*SDKRequestOfflineEncrypt) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{64}
}

func (x *SDKRequestOfflineEncrypt) GetPlaintextInputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.PlaintextInputFile
	}
	return nil
}

func (x *SDKRequestOfflineEncrypt) GetCiphertextOutputFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CiphertextOutputFile
	}
	return nil
}

func (x *SDKRequestOfflineEncrypt) GetPublicKeyOrCert() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicKeyOrCert
	}
	return nil
}

type APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentKeyId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	Algo           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) Reset() {
	*x = APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) ProtoMessage() {}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{38, 0}
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) GetPermanentKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.PermanentKeyId
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

type APIRequestE2EECompare_Comparewith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentKeyId *wrapperspb.StringValue     `protobuf:"bytes,1,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	KeyVersion     *wrapperspb.UInt32Value     `protobuf:"bytes,2,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Algo           *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"`
	Ciphertext     []*APIRequestE2EECiphertext `protobuf:"bytes,4,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequestE2EECompare_Comparewith) Reset() {
	*x = APIRequestE2EECompare_Comparewith{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EECompare_Comparewith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EECompare_Comparewith) ProtoMessage() {}

func (x *APIRequestE2EECompare_Comparewith) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EECompare_Comparewith.ProtoReflect.Descriptor instead.
func (*APIRequestE2EECompare_Comparewith) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{40, 0}
}

func (x *APIRequestE2EECompare_Comparewith) GetPermanentKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.PermanentKeyId
	}
	return nil
}

func (x *APIRequestE2EECompare_Comparewith) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequestE2EECompare_Comparewith) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *APIRequestE2EECompare_Comparewith) GetCiphertext() []*APIRequestE2EECiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId              *wrapperspb.StringValue     `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	EncryptedClientKey         *wrapperspb.StringValue     `protobuf:"bytes,2,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	EncryptedClientKeyMetadata *wrapperspb.StringValue     `protobuf:"bytes,3,opt,name=encryptedClientKeyMetadata,proto3" json:"encryptedClientKeyMetadata,omitempty"`
	Algo                       *wrapperspb.StringValue     `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	PermanentKeyId             *wrapperspb.StringValue     `protobuf:"bytes,5,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	KeyVersion                 *wrapperspb.UInt32Value     `protobuf:"bytes,6,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Ciphertext                 []*APIRequestE2EECiphertext `protobuf:"bytes,7,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) Reset() {
	*x = APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) ProtoMessage() {}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{41, 0}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetEncryptedClientKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetEncryptedClientKeyMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKeyMetadata
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetPermanentKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.PermanentKeyId
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source) GetCiphertext() []*APIRequestE2EECiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKeyAlgo *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=clientKeyAlgo,proto3" json:"clientKeyAlgo,omitempty"`
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) Reset() {
	*x = APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) ProtoMessage() {}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{41, 1}
}

func (x *APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination) GetClientKeyAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientKeyAlgo
	}
	return nil
}

type APIRequestE2EEEncryptToClientKey_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	EncryptedClientKey         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	EncryptedClientKeyMetadata *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=encryptedClientKeyMetadata,proto3" json:"encryptedClientKeyMetadata,omitempty"`
	Algo                       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	Plaintext                  []string                `protobuf:"bytes,5,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *APIRequestE2EEEncryptToClientKey_Source) Reset() {
	*x = APIRequestE2EEEncryptToClientKey_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEEncryptToClientKey_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEEncryptToClientKey_Source) ProtoMessage() {}

func (x *APIRequestE2EEEncryptToClientKey_Source) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEEncryptToClientKey_Source.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEEncryptToClientKey_Source) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{43, 0}
}

func (x *APIRequestE2EEEncryptToClientKey_Source) GetWrappingKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappingKeyId
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey_Source) GetEncryptedClientKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey_Source) GetEncryptedClientKeyMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKeyMetadata
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey_Source) GetAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.Algo
	}
	return nil
}

func (x *APIRequestE2EEEncryptToClientKey_Source) GetPlaintext() []string {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type APIRequestE2EEEncryptToClientKey_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKeyAlgo *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=clientKeyAlgo,proto3" json:"clientKeyAlgo,omitempty"`
}

func (x *APIRequestE2EEEncryptToClientKey_Destination) Reset() {
	*x = APIRequestE2EEEncryptToClientKey_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_APIRequest_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestE2EEEncryptToClientKey_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestE2EEEncryptToClientKey_Destination) ProtoMessage() {}

func (x *APIRequestE2EEEncryptToClientKey_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_APIRequest_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestE2EEEncryptToClientKey_Destination.ProtoReflect.Descriptor instead.
func (*APIRequestE2EEEncryptToClientKey_Destination) Descriptor() ([]byte, []int) {
	return file_APIRequest_proto_rawDescGZIP(), []int{43, 1}
}

func (x *APIRequestE2EEEncryptToClientKey_Destination) GetClientKeyAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientKeyAlgo
	}
	return nil
}

var File_APIRequest_proto protoreflect.FileDescriptor

var file_APIRequest_proto_rawDesc = []byte{
	0x0a, 0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3e,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd6,
	0x01, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x41,
	0x43, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x41, 0x43, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x76, 0x22, 0xf8, 0x02, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x41, 0x43, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x41, 0x43, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x97,
	0x03, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03,
	0x61, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x76, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xaa, 0x03, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a,
	0x18, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x68, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x68, 0x61, 0x72, 0x12, 0x42, 0x0a,
	0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x73,
	0x76, 0x22, 0xd0, 0x02, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6b,
	0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf0, 0x03, 0x0a, 0x0e, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x40, 0x0a, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c,
	0x67, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x04, 0x0a,
	0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbb, 0x03,
	0x0a, 0x19, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x73,
	0x72, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x3e, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x1b,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x0d,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x4e, 0x47, 0x12, 0x40, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x9e, 0x02, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xee, 0x01, 0x0a, 0x10, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x73, 0x65, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x7b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x61, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x22, 0x90,
	0x03, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xc1, 0x02, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x84, 0x05, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x6c,
	0x67, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x6c,
	0x67, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x11,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12,
	0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xde, 0x05, 0x0a, 0x22, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x6c, 0x0a, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4f, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61,
	0x6c, 0x67, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x36, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x43, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x77, 0x69, 0x74, 0x68, 0x43, 0x65, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xca, 0x03, 0x0a, 0x1e,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x41, 0x43, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa6, 0x04, 0x0a, 0x1c, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x41, 0x43, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41,
	0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67,
	0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69,
	0x76, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xa7, 0x03, 0x0a, 0x1b, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x4a, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xff, 0x03, 0x0a, 0x17,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x83, 0x04,
	0x0a, 0x19, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x12,
	0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xf9, 0x02, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x73, 0x65, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xaf, 0x04, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xec, 0x02, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb0, 0x03, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69,
	0x7a, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xad, 0x03, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69,
	0x7a, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xf6, 0x03, 0x0a, 0x10, 0x45, 0x32, 0x45, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x6d,
	0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x04, 0x0a, 0x33, 0x41, 0x50,
	0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x52, 0x65, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x32, 0x45, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x32, 0x45, 0x45, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x22, 0xfe, 0x04, 0x0a, 0x15, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x32, 0x45, 0x45, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x32, 0x45, 0x45, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x77, 0x69, 0x74, 0x68, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x91, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x77, 0x69, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32,
	0x45, 0x45, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x08, 0x0a, 0x32, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x52, 0x65, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6b, 0x6b,
	0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x52,
	0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x74, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63,
	0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x52, 0x65, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xfc, 0x03, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45,
	0x45, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x22, 0x85, 0x05, 0x0a, 0x23, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x44,
	0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x41, 0x6c, 0x67, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x3a, 0x0a, 0x09,
	0x6f, 0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f,
	0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xb5, 0x06, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x32, 0x45, 0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x32, 0x45, 0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6b, 0x6b, 0x2e, 0x6b, 0x6b, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x32, 0x45,
	0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xc8, 0x02, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x1a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x22, 0xad, 0x02, 0x0a, 0x14, 0x53,
	0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x45, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x45, 0x4d, 0x12, 0x28, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x45, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x45, 0x4d, 0x42, 0x19, 0x0a, 0x17, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x53,
	0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x13, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x87, 0x02, 0x0a, 0x15, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x15, 0x53,
	0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x76, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x76, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xec, 0x02,
	0x0a, 0x19, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0xc1, 0x02, 0x0a,
	0x19, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36,
	0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45,
	0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x22, 0xc1, 0x02, 0x0a, 0x19, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x43, 0x42,
	0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x45,
	0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x43, 0x42, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x22, 0x90, 0x04, 0x0a, 0x14, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x43, 0x42, 0x43, 0x12, 0x40, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x76, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x76, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x19, 0x53, 0x44, 0x4b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x41, 0x43, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x41, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xf2, 0x02, 0x0a, 0x1c, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x4d, 0x41, 0x43, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0xc8, 0x02, 0x0a, 0x1d, 0x53, 0x44, 0x4b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x41, 0x43,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41,
	0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x4d,
	0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x22, 0xe5, 0x02, 0x0a, 0x1b, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x41, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53,
	0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x4d, 0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x4d,
	0x41, 0x43, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x22, 0xac, 0x03, 0x0a, 0x1a, 0x53, 0x44,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa5, 0x04, 0x0a, 0x1a, 0x53, 0x44, 0x4b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x76, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x76, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67,
	0x22, 0xd5, 0x02, 0x0a, 0x1f, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x48, 0x4d, 0x41, 0x43, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x1d, 0x53, 0x44, 0x4b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x48, 0x4d, 0x41, 0x43, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x22, 0x62, 0x0a,
	0x18, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x53, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x22,
	0x53, 0x44, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x53, 0x44, 0x4b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x43, 0x65, 0x72, 0x74, 0x42, 0x51, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x69, 0x70,
	0x74, 0x61, 0x6b, 0x65, 0x79, 0x2f, 0x6b, 0x6b, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x76, 0x32, 0x34, 0x2e, 0x31, 0x2f, 0x6b, 0x72, 0x69, 0x70, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0xaa, 0x02, 0x12, 0x4b, 0x4b,
	0x2e, 0x4b, 0x4b, 0x43, 0x53, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_APIRequest_proto_rawDescOnce sync.Once
	file_APIRequest_proto_rawDescData = file_APIRequest_proto_rawDesc
)

func file_APIRequest_proto_rawDescGZIP() []byte {
	file_APIRequest_proto_rawDescOnce.Do(func() {
		file_APIRequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_APIRequest_proto_rawDescData)
	})
	return file_APIRequest_proto_rawDescData
}

var file_APIRequest_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_APIRequest_proto_goTypes = []interface{}{
	(*APIRequestLogin)(nil),                                                 // 0: kk.kkcs.apirequest.APIRequestLogin
	(*APIRequestRefreshSession)(nil),                                        // 1: kk.kkcs.apirequest.APIRequestRefreshSession
	(*APIRequestGenerateMAC)(nil),                                           // 2: kk.kkcs.apirequest.APIRequestGenerateMAC
	(*SingleVerifyMAC)(nil),                                                 // 3: kk.kkcs.apirequest.SingleVerifyMAC
	(*APIRequestVerifyMAC)(nil),                                             // 4: kk.kkcs.apirequest.APIRequestVerifyMAC
	(*APIRequestSingleDecrypt)(nil),                                         // 5: kk.kkcs.apirequest.APIRequestSingleDecrypt
	(*APIRequestDecrypt)(nil),                                               // 6: kk.kkcs.apirequest.APIRequestDecrypt
	(*APIRequestSingleReEncrypt)(nil),                                       // 7: kk.kkcs.apirequest.APIRequestSingleReEncrypt
	(*APIRequestReEncrypt)(nil),                                             // 8: kk.kkcs.apirequest.APIRequestReEncrypt
	(*APIRequestSingleTokenize)(nil),                                        // 9: kk.kkcs.apirequest.APIRequestSingleTokenize
	(*APIRequestTokenize)(nil),                                              // 10: kk.kkcs.apirequest.APIRequestTokenize
	(*APIRequestDetokenize)(nil),                                            // 11: kk.kkcs.apirequest.APIRequestDetokenize
	(*APIRequestSign)(nil),                                                  // 12: kk.kkcs.apirequest.APIRequestSign
	(*APIRequestVerify)(nil),                                                // 13: kk.kkcs.apirequest.APIRequestVerify
	(*APIRequestCertificateSign)(nil),                                       // 14: kk.kkcs.apirequest.APIRequestCertificateSign
	(*APIRequestCertificateVerify)(nil),                                     // 15: kk.kkcs.apirequest.APIRequestCertificateVerify
	(*APIRequestRNG)(nil),                                                   // 16: kk.kkcs.apirequest.APIRequestRNG
	(*APIRequestSeal)(nil),                                                  // 17: kk.kkcs.apirequest.APIRequestSeal
	(*APIRequestUnseal)(nil),                                                // 18: kk.kkcs.apirequest.APIRequestUnseal
	(*APIRequestSingleEncrypt)(nil),                                         // 19: kk.kkcs.apirequest.APIRequestSingleEncrypt
	(*APIRequestEncrypt)(nil),                                               // 20: kk.kkcs.apirequest.APIRequestEncrypt
	(*APIRequestGetSecret)(nil),                                             // 21: kk.kkcs.apirequest.APIRequestGetSecret
	(*APIRequestKeyInfo)(nil),                                               // 22: kk.kkcs.apirequest.APIRequestKeyInfo
	(*APIRequestAppstoredGenerateKey)(nil),                                  // 23: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey
	(*APIRequestAppstoredGenerateKeyPair)(nil),                              // 24: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair
	(*APIRequestAppstoredGenerateMAC)(nil),                                  // 25: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC
	(*APIRequestAppstoredVerifyMAC)(nil),                                    // 26: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC
	(*APIRequestAppstoredTokenize)(nil),                                     // 27: kk.kkcs.apirequest.APIRequestAppstoredTokenize
	(*APIRequestAppstoredSign)(nil),                                         // 28: kk.kkcs.apirequest.APIRequestAppstoredSign
	(*APIRequestAppstoredVerify)(nil),                                       // 29: kk.kkcs.apirequest.APIRequestAppstoredVerify
	(*APIRequestAppstoredSeal)(nil),                                         // 30: kk.kkcs.apirequest.APIRequestAppstoredSeal
	(*APIRequestAppstoredUnseal)(nil),                                       // 31: kk.kkcs.apirequest.APIRequestAppstoredUnseal
	(*APIRequestAppstoredEncrypt)(nil),                                      // 32: kk.kkcs.apirequest.APIRequestAppstoredEncrypt
	(*APIRequestSingleAppstoredDecrypt)(nil),                                // 33: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt
	(*APIRequestAppstoredDecrypt)(nil),                                      // 34: kk.kkcs.apirequest.APIRequestAppstoredDecrypt
	(*APIRequestSingleDetokenize)(nil),                                      // 35: kk.kkcs.apirequest.APIRequestSingleDetokenize
	(*APIRequestAppstoredDetokenize)(nil),                                   // 36: kk.kkcs.apirequest.APIRequestAppstoredDetokenize
	(*E2EESourceCipher)(nil),                                                // 37: kk.kkcs.apirequest.E2EESourceCipher
	(*APIRequestE2EEReencryptFromSessionKeyToPermanentKey)(nil),             // 38: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey
	(*APIRequestE2EECiphertext)(nil),                                        // 39: kk.kkcs.apirequest.APIRequestE2EECiphertext
	(*APIRequestE2EECompare)(nil),                                           // 40: kk.kkcs.apirequest.APIRequestE2EECompare
	(*APIRequestE2EEReencryptFromPermanentKeyToClientKey)(nil),              // 41: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey
	(*APIRequestE2EEDecryptFromSessionKey)(nil),                             // 42: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey
	(*APIRequestE2EEEncryptToClientKey)(nil),                                // 43: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey
	(*SDKRequestConnection)(nil),                                            // 44: kk.kkcs.apirequest.SDKRequestConnection
	(*SDKRequestGeneral)(nil),                                               // 45: kk.kkcs.apirequest.SDKRequestGeneral
	(*SDKRequestInitEncrypt)(nil),                                           // 46: kk.kkcs.apirequest.SDKRequestInitEncrypt
	(*SDKRequestInitDecrypt)(nil),                                           // 47: kk.kkcs.apirequest.SDKRequestInitDecrypt
	(*SDKRequestMultipartUpdate)(nil),                                       // 48: kk.kkcs.apirequest.SDKRequestMultipartUpdate
	(*SDKRequestFinalizeEncrypt)(nil),                                       // 49: kk.kkcs.apirequest.SDKRequestFinalizeEncrypt
	(*SDKRequestFinalizeDecrypt)(nil),                                       // 50: kk.kkcs.apirequest.SDKRequestFinalizeDecrypt
	(*SDKRequestDecryptCBC)(nil),                                            // 51: kk.kkcs.apirequest.SDKRequestDecryptCBC
	(*SDKRequestInitMACGenerate)(nil),                                       // 52: kk.kkcs.apirequest.SDKRequestInitMACGenerate
	(*SDKRequestInitMACVerify)(nil),                                         // 53: kk.kkcs.apirequest.SDKRequestInitMACVerify
	(*SDKRequestMultipartMACUpdate)(nil),                                    // 54: kk.kkcs.apirequest.SDKRequestMultipartMACUpdate
	(*SDKRequestFinalizeMACGenerate)(nil),                                   // 55: kk.kkcs.apirequest.SDKRequestFinalizeMACGenerate
	(*SDKRequestFinalizeMACVerify)(nil),                                     // 56: kk.kkcs.apirequest.SDKRequestFinalizeMACVerify
	(*SDKRequestMultipartEncrypt)(nil),                                      // 57: kk.kkcs.apirequest.SDKRequestMultipartEncrypt
	(*SDKRequestMultipartDecrypt)(nil),                                      // 58: kk.kkcs.apirequest.SDKRequestMultipartDecrypt
	(*SDKRequestMultipartHMACGenerate)(nil),                                 // 59: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate
	(*SDKRequestMultipartHMACVerify)(nil),                                   // 60: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify
	(*SDKRequestSealForTransit)(nil),                                        // 61: kk.kkcs.apirequest.SDKRequestSealForTransit
	(*SDKRequestUnSealFromTransit)(nil),                                     // 62: kk.kkcs.apirequest.SDKRequestUnSealFromTransit
	(*SDKRequestOfflineEncryptionDecrypt)(nil),                              // 63: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt
	(*SDKRequestOfflineEncrypt)(nil),                                        // 64: kk.kkcs.apirequest.SDKRequestOfflineEncrypt
	(*APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination)(nil), // 65: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.Destination
	(*APIRequestE2EECompare_Comparewith)(nil),                               // 66: kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith
	(*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source)(nil),       // 67: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source
	(*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination)(nil),  // 68: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Destination
	(*APIRequestE2EEEncryptToClientKey_Source)(nil),                         // 69: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source
	(*APIRequestE2EEEncryptToClientKey_Destination)(nil),                    // 70: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Destination
	(*wrapperspb.UInt32Value)(nil),                                          // 71: google.protobuf.UInt32Value
	(*wrapperspb.StringValue)(nil),                                          // 72: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                                            // 73: google.protobuf.BoolValue
}
var file_APIRequest_proto_depIdxs = []int32{
	71,  // 0: kk.kkcs.apirequest.APIRequestLogin.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 1: kk.kkcs.apirequest.APIRequestLogin.password:type_name -> google.protobuf.StringValue
	71,  // 2: kk.kkcs.apirequest.APIRequestLogin.partitionId:type_name -> google.protobuf.UInt32Value
	71,  // 3: kk.kkcs.apirequest.APIRequestRefreshSession.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 4: kk.kkcs.apirequest.APIRequestRefreshSession.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 5: kk.kkcs.apirequest.APIRequestRefreshSession.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 6: kk.kkcs.apirequest.APIRequestGenerateMAC.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 7: kk.kkcs.apirequest.APIRequestGenerateMAC.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 8: kk.kkcs.apirequest.APIRequestGenerateMAC.keyId:type_name -> google.protobuf.StringValue
	72,  // 9: kk.kkcs.apirequest.APIRequestGenerateMAC.hashAlgo:type_name -> google.protobuf.StringValue
	71,  // 10: kk.kkcs.apirequest.APIRequestGenerateMAC.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 11: kk.kkcs.apirequest.SingleVerifyMAC.data:type_name -> google.protobuf.StringValue
	72,  // 12: kk.kkcs.apirequest.SingleVerifyMAC.mac:type_name -> google.protobuf.StringValue
	72,  // 13: kk.kkcs.apirequest.SingleVerifyMAC.iv:type_name -> google.protobuf.StringValue
	72,  // 14: kk.kkcs.apirequest.APIRequestVerifyMAC.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 15: kk.kkcs.apirequest.APIRequestVerifyMAC.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 16: kk.kkcs.apirequest.APIRequestVerifyMAC.keyId:type_name -> google.protobuf.StringValue
	72,  // 17: kk.kkcs.apirequest.APIRequestVerifyMAC.hashAlgo:type_name -> google.protobuf.StringValue
	3,   // 18: kk.kkcs.apirequest.APIRequestVerifyMAC.data:type_name -> kk.kkcs.apirequest.SingleVerifyMAC
	71,  // 19: kk.kkcs.apirequest.APIRequestVerifyMAC.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 20: kk.kkcs.apirequest.APIRequestSingleDecrypt.text:type_name -> google.protobuf.StringValue
	72,  // 21: kk.kkcs.apirequest.APIRequestSingleDecrypt.aad:type_name -> google.protobuf.StringValue
	72,  // 22: kk.kkcs.apirequest.APIRequestSingleDecrypt.mac:type_name -> google.protobuf.StringValue
	72,  // 23: kk.kkcs.apirequest.APIRequestSingleDecrypt.iv:type_name -> google.protobuf.StringValue
	72,  // 24: kk.kkcs.apirequest.APIRequestSingleDecrypt.keyId:type_name -> google.protobuf.StringValue
	72,  // 25: kk.kkcs.apirequest.APIRequestSingleDecrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	71,  // 26: kk.kkcs.apirequest.APIRequestSingleDecrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	72,  // 27: kk.kkcs.apirequest.APIRequestDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 28: kk.kkcs.apirequest.APIRequestDecrypt.slotId:type_name -> google.protobuf.UInt32Value
	5,   // 29: kk.kkcs.apirequest.APIRequestDecrypt.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestSingleDecrypt
	71,  // 30: kk.kkcs.apirequest.APIRequestDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 31: kk.kkcs.apirequest.APIRequestSingleReEncrypt.text:type_name -> google.protobuf.StringValue
	72,  // 32: kk.kkcs.apirequest.APIRequestSingleReEncrypt.aad:type_name -> google.protobuf.StringValue
	72,  // 33: kk.kkcs.apirequest.APIRequestSingleReEncrypt.mac:type_name -> google.protobuf.StringValue
	72,  // 34: kk.kkcs.apirequest.APIRequestSingleReEncrypt.iv:type_name -> google.protobuf.StringValue
	72,  // 35: kk.kkcs.apirequest.APIRequestSingleReEncrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	71,  // 36: kk.kkcs.apirequest.APIRequestSingleReEncrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	72,  // 37: kk.kkcs.apirequest.APIRequestReEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 38: kk.kkcs.apirequest.APIRequestReEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 39: kk.kkcs.apirequest.APIRequestReEncrypt.sourceKeyId:type_name -> google.protobuf.StringValue
	72,  // 40: kk.kkcs.apirequest.APIRequestReEncrypt.destinationKeyId:type_name -> google.protobuf.StringValue
	7,   // 41: kk.kkcs.apirequest.APIRequestReEncrypt.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestSingleReEncrypt
	71,  // 42: kk.kkcs.apirequest.APIRequestReEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 43: kk.kkcs.apirequest.APIRequestSingleTokenize.text:type_name -> google.protobuf.StringValue
	72,  // 44: kk.kkcs.apirequest.APIRequestSingleTokenize.formatChar:type_name -> google.protobuf.StringValue
	72,  // 45: kk.kkcs.apirequest.APIRequestSingleTokenize.tokenizedWith:type_name -> google.protobuf.StringValue
	72,  // 46: kk.kkcs.apirequest.APIRequestSingleTokenize.usv:type_name -> google.protobuf.StringValue
	72,  // 47: kk.kkcs.apirequest.APIRequestTokenize.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 48: kk.kkcs.apirequest.APIRequestTokenize.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 49: kk.kkcs.apirequest.APIRequestTokenize.keyId:type_name -> google.protobuf.StringValue
	9,   // 50: kk.kkcs.apirequest.APIRequestTokenize.plaintext:type_name -> kk.kkcs.apirequest.APIRequestSingleTokenize
	71,  // 51: kk.kkcs.apirequest.APIRequestTokenize.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 52: kk.kkcs.apirequest.APIRequestDetokenize.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 53: kk.kkcs.apirequest.APIRequestDetokenize.slotId:type_name -> google.protobuf.UInt32Value
	35,  // 54: kk.kkcs.apirequest.APIRequestDetokenize.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestSingleDetokenize
	71,  // 55: kk.kkcs.apirequest.APIRequestDetokenize.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 56: kk.kkcs.apirequest.APIRequestSign.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 57: kk.kkcs.apirequest.APIRequestSign.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 58: kk.kkcs.apirequest.APIRequestSign.keyId:type_name -> google.protobuf.StringValue
	72,  // 59: kk.kkcs.apirequest.APIRequestSign.inputType:type_name -> google.protobuf.StringValue
	72,  // 60: kk.kkcs.apirequest.APIRequestSign.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 61: kk.kkcs.apirequest.APIRequestSign.signatureScheme:type_name -> google.protobuf.StringValue
	72,  // 62: kk.kkcs.apirequest.APIRequestSign.data:type_name -> google.protobuf.StringValue
	71,  // 63: kk.kkcs.apirequest.APIRequestSign.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 64: kk.kkcs.apirequest.APIRequestVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 65: kk.kkcs.apirequest.APIRequestVerify.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 66: kk.kkcs.apirequest.APIRequestVerify.keyId:type_name -> google.protobuf.StringValue
	72,  // 67: kk.kkcs.apirequest.APIRequestVerify.inputType:type_name -> google.protobuf.StringValue
	72,  // 68: kk.kkcs.apirequest.APIRequestVerify.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 69: kk.kkcs.apirequest.APIRequestVerify.signatureScheme:type_name -> google.protobuf.StringValue
	72,  // 70: kk.kkcs.apirequest.APIRequestVerify.data:type_name -> google.protobuf.StringValue
	72,  // 71: kk.kkcs.apirequest.APIRequestVerify.signature:type_name -> google.protobuf.StringValue
	71,  // 72: kk.kkcs.apirequest.APIRequestVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 73: kk.kkcs.apirequest.APIRequestCertificateSign.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 74: kk.kkcs.apirequest.APIRequestCertificateSign.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 75: kk.kkcs.apirequest.APIRequestCertificateSign.validityPeriod:type_name -> google.protobuf.UInt32Value
	72,  // 76: kk.kkcs.apirequest.APIRequestCertificateSign.keyId:type_name -> google.protobuf.StringValue
	72,  // 77: kk.kkcs.apirequest.APIRequestCertificateSign.csr:type_name -> google.protobuf.StringValue
	72,  // 78: kk.kkcs.apirequest.APIRequestCertificateSign.hashAlgo:type_name -> google.protobuf.StringValue
	71,  // 79: kk.kkcs.apirequest.APIRequestCertificateSign.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 80: kk.kkcs.apirequest.APIRequestCertificateVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 81: kk.kkcs.apirequest.APIRequestCertificateVerify.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 82: kk.kkcs.apirequest.APIRequestCertificateVerify.keyId:type_name -> google.protobuf.StringValue
	72,  // 83: kk.kkcs.apirequest.APIRequestCertificateVerify.certificate:type_name -> google.protobuf.StringValue
	71,  // 84: kk.kkcs.apirequest.APIRequestCertificateVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 85: kk.kkcs.apirequest.APIRequestRNG.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 86: kk.kkcs.apirequest.APIRequestRNG.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 87: kk.kkcs.apirequest.APIRequestRNG.length:type_name -> google.protobuf.UInt32Value
	71,  // 88: kk.kkcs.apirequest.APIRequestRNG.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 89: kk.kkcs.apirequest.APIRequestSeal.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 90: kk.kkcs.apirequest.APIRequestSeal.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 91: kk.kkcs.apirequest.APIRequestSeal.keyId:type_name -> google.protobuf.StringValue
	71,  // 92: kk.kkcs.apirequest.APIRequestSeal.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 93: kk.kkcs.apirequest.APIRequestUnseal.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 94: kk.kkcs.apirequest.APIRequestUnseal.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 95: kk.kkcs.apirequest.APIRequestUnseal.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 96: kk.kkcs.apirequest.APIRequestSingleEncrypt.text:type_name -> google.protobuf.StringValue
	72,  // 97: kk.kkcs.apirequest.APIRequestSingleEncrypt.aad:type_name -> google.protobuf.StringValue
	72,  // 98: kk.kkcs.apirequest.APIRequestEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 99: kk.kkcs.apirequest.APIRequestEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 100: kk.kkcs.apirequest.APIRequestEncrypt.keyId:type_name -> google.protobuf.StringValue
	19,  // 101: kk.kkcs.apirequest.APIRequestEncrypt.plaintext:type_name -> kk.kkcs.apirequest.APIRequestSingleEncrypt
	73,  // 102: kk.kkcs.apirequest.APIRequestEncrypt.useSessionKey:type_name -> google.protobuf.BoolValue
	71,  // 103: kk.kkcs.apirequest.APIRequestEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 104: kk.kkcs.apirequest.APIRequestGetSecret.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 105: kk.kkcs.apirequest.APIRequestGetSecret.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 106: kk.kkcs.apirequest.APIRequestGetSecret.secretId:type_name -> google.protobuf.StringValue
	71,  // 107: kk.kkcs.apirequest.APIRequestGetSecret.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 108: kk.kkcs.apirequest.APIRequestKeyInfo.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 109: kk.kkcs.apirequest.APIRequestKeyInfo.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 110: kk.kkcs.apirequest.APIRequestKeyInfo.keyId:type_name -> google.protobuf.StringValue
	71,  // 111: kk.kkcs.apirequest.APIRequestKeyInfo.keyVersion:type_name -> google.protobuf.UInt32Value
	71,  // 112: kk.kkcs.apirequest.APIRequestKeyInfo.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 113: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 114: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 115: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.wrappingMethod:type_name -> google.protobuf.StringValue
	72,  // 116: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.algo:type_name -> google.protobuf.StringValue
	71,  // 117: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.algoLength:type_name -> google.protobuf.UInt32Value
	72,  // 118: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.internalWrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 119: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.externalPublicKey:type_name -> google.protobuf.StringValue
	71,  // 120: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 121: kk.kkcs.apirequest.APIRequestAppstoredGenerateKey.appstoredPublicKey:type_name -> google.protobuf.StringValue
	72,  // 122: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 123: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 124: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.wrappingMethod:type_name -> google.protobuf.StringValue
	72,  // 125: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.externalPublicKeyOrWrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 126: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.algo:type_name -> google.protobuf.StringValue
	71,  // 127: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.algoLength:type_name -> google.protobuf.UInt32Value
	73,  // 128: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.withCert:type_name -> google.protobuf.BoolValue
	71,  // 129: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 130: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.internalWrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 131: kk.kkcs.apirequest.APIRequestAppstoredGenerateKeyPair.appstoredPublicKey:type_name -> google.protobuf.StringValue
	72,  // 132: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 133: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 134: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 135: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.wrappedKey:type_name -> google.protobuf.StringValue
	72,  // 136: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 137: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.data:type_name -> google.protobuf.StringValue
	71,  // 138: kk.kkcs.apirequest.APIRequestAppstoredGenerateMAC.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 139: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 140: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 141: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 142: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.wrappedKey:type_name -> google.protobuf.StringValue
	72,  // 143: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 144: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.data:type_name -> google.protobuf.StringValue
	72,  // 145: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.mac:type_name -> google.protobuf.StringValue
	72,  // 146: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.iv:type_name -> google.protobuf.StringValue
	71,  // 147: kk.kkcs.apirequest.APIRequestAppstoredVerifyMAC.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 148: kk.kkcs.apirequest.APIRequestAppstoredTokenize.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 149: kk.kkcs.apirequest.APIRequestAppstoredTokenize.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 150: kk.kkcs.apirequest.APIRequestAppstoredTokenize.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 151: kk.kkcs.apirequest.APIRequestAppstoredTokenize.wrappedKey:type_name -> google.protobuf.StringValue
	9,   // 152: kk.kkcs.apirequest.APIRequestAppstoredTokenize.plaintext:type_name -> kk.kkcs.apirequest.APIRequestSingleTokenize
	71,  // 153: kk.kkcs.apirequest.APIRequestAppstoredTokenize.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 154: kk.kkcs.apirequest.APIRequestAppstoredSign.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 155: kk.kkcs.apirequest.APIRequestAppstoredSign.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 156: kk.kkcs.apirequest.APIRequestAppstoredSign.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 157: kk.kkcs.apirequest.APIRequestAppstoredSign.wrappedKey:type_name -> google.protobuf.StringValue
	72,  // 158: kk.kkcs.apirequest.APIRequestAppstoredSign.inputType:type_name -> google.protobuf.StringValue
	72,  // 159: kk.kkcs.apirequest.APIRequestAppstoredSign.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 160: kk.kkcs.apirequest.APIRequestAppstoredSign.data:type_name -> google.protobuf.StringValue
	71,  // 161: kk.kkcs.apirequest.APIRequestAppstoredSign.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 162: kk.kkcs.apirequest.APIRequestAppstoredVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 163: kk.kkcs.apirequest.APIRequestAppstoredVerify.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 164: kk.kkcs.apirequest.APIRequestAppstoredVerify.publicKeyOrCert:type_name -> google.protobuf.StringValue
	72,  // 165: kk.kkcs.apirequest.APIRequestAppstoredVerify.inputType:type_name -> google.protobuf.StringValue
	72,  // 166: kk.kkcs.apirequest.APIRequestAppstoredVerify.hashAlgo:type_name -> google.protobuf.StringValue
	72,  // 167: kk.kkcs.apirequest.APIRequestAppstoredVerify.data:type_name -> google.protobuf.StringValue
	72,  // 168: kk.kkcs.apirequest.APIRequestAppstoredVerify.signature:type_name -> google.protobuf.StringValue
	71,  // 169: kk.kkcs.apirequest.APIRequestAppstoredVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 170: kk.kkcs.apirequest.APIRequestAppstoredSeal.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 171: kk.kkcs.apirequest.APIRequestAppstoredSeal.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 172: kk.kkcs.apirequest.APIRequestAppstoredSeal.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 173: kk.kkcs.apirequest.APIRequestAppstoredSeal.wrappedKey:type_name -> google.protobuf.StringValue
	72,  // 174: kk.kkcs.apirequest.APIRequestAppstoredSeal.publicKeyOrCert:type_name -> google.protobuf.StringValue
	71,  // 175: kk.kkcs.apirequest.APIRequestAppstoredSeal.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 176: kk.kkcs.apirequest.APIRequestAppstoredUnseal.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 177: kk.kkcs.apirequest.APIRequestAppstoredUnseal.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 178: kk.kkcs.apirequest.APIRequestAppstoredUnseal.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 179: kk.kkcs.apirequest.APIRequestAppstoredUnseal.wrappedKey:type_name -> google.protobuf.StringValue
	71,  // 180: kk.kkcs.apirequest.APIRequestAppstoredUnseal.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 181: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 182: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 183: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 184: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.wrappedKey:type_name -> google.protobuf.StringValue
	19,  // 185: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.plaintext:type_name -> kk.kkcs.apirequest.APIRequestSingleEncrypt
	72,  // 186: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.publicKeyOrCert:type_name -> google.protobuf.StringValue
	73,  // 187: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.useSessionKey:type_name -> google.protobuf.BoolValue
	71,  // 188: kk.kkcs.apirequest.APIRequestAppstoredEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 189: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.text:type_name -> google.protobuf.StringValue
	72,  // 190: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.aad:type_name -> google.protobuf.StringValue
	72,  // 191: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.mac:type_name -> google.protobuf.StringValue
	72,  // 192: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.iv:type_name -> google.protobuf.StringValue
	72,  // 193: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	71,  // 194: kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	72,  // 195: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 196: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 197: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 198: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.wrappedKey:type_name -> google.protobuf.StringValue
	33,  // 199: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestSingleAppstoredDecrypt
	71,  // 200: kk.kkcs.apirequest.APIRequestAppstoredDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 201: kk.kkcs.apirequest.APIRequestSingleDetokenize.token:type_name -> google.protobuf.StringValue
	72,  // 202: kk.kkcs.apirequest.APIRequestSingleDetokenize.metadata:type_name -> google.protobuf.StringValue
	72,  // 203: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 204: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 205: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 206: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.wrappedKey:type_name -> google.protobuf.StringValue
	35,  // 207: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestSingleDetokenize
	71,  // 208: kk.kkcs.apirequest.APIRequestAppstoredDetokenize.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 209: kk.kkcs.apirequest.E2EESourceCipher.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 210: kk.kkcs.apirequest.E2EESourceCipher.wrappedPrivateKey:type_name -> google.protobuf.StringValue
	72,  // 211: kk.kkcs.apirequest.E2EESourceCipher.sessionKeyAlgo:type_name -> google.protobuf.StringValue
	72,  // 212: kk.kkcs.apirequest.E2EESourceCipher.macAlgo:type_name -> google.protobuf.StringValue
	72,  // 213: kk.kkcs.apirequest.E2EESourceCipher.oaepLabel:type_name -> google.protobuf.StringValue
	72,  // 214: kk.kkcs.apirequest.E2EESourceCipher.metadata:type_name -> google.protobuf.StringValue
	71,  // 215: kk.kkcs.apirequest.E2EESourceCipher.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 216: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 217: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.slotId:type_name -> google.protobuf.UInt32Value
	37,  // 218: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.source:type_name -> kk.kkcs.apirequest.E2EESourceCipher
	65,  // 219: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.destination:type_name -> kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.Destination
	71,  // 220: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 221: kk.kkcs.apirequest.APIRequestE2EECiphertext.text:type_name -> google.protobuf.StringValue
	72,  // 222: kk.kkcs.apirequest.APIRequestE2EECiphertext.mac:type_name -> google.protobuf.StringValue
	72,  // 223: kk.kkcs.apirequest.APIRequestE2EECiphertext.iv:type_name -> google.protobuf.StringValue
	72,  // 224: kk.kkcs.apirequest.APIRequestE2EECompare.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 225: kk.kkcs.apirequest.APIRequestE2EECompare.slotId:type_name -> google.protobuf.UInt32Value
	37,  // 226: kk.kkcs.apirequest.APIRequestE2EECompare.source:type_name -> kk.kkcs.apirequest.E2EESourceCipher
	66,  // 227: kk.kkcs.apirequest.APIRequestE2EECompare.compareWith:type_name -> kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith
	71,  // 228: kk.kkcs.apirequest.APIRequestE2EECompare.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 229: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 230: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.slotId:type_name -> google.protobuf.UInt32Value
	67,  // 231: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.source:type_name -> kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source
	68,  // 232: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.destination:type_name -> kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Destination
	71,  // 233: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 234: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 235: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 236: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 237: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.wrappedPrivateKey:type_name -> google.protobuf.StringValue
	72,  // 238: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.sessionKeyAlgo:type_name -> google.protobuf.StringValue
	72,  // 239: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.macAlgo:type_name -> google.protobuf.StringValue
	72,  // 240: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.oaepLabel:type_name -> google.protobuf.StringValue
	72,  // 241: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.metadata:type_name -> google.protobuf.StringValue
	71,  // 242: kk.kkcs.apirequest.APIRequestE2EEDecryptFromSessionKey.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 243: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 244: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.slotId:type_name -> google.protobuf.UInt32Value
	69,  // 245: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.source:type_name -> kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source
	70,  // 246: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.destination:type_name -> kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Destination
	71,  // 247: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 248: kk.kkcs.apirequest.SDKRequestInitEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 249: kk.kkcs.apirequest.SDKRequestInitEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 250: kk.kkcs.apirequest.SDKRequestInitEncrypt.keyId:type_name -> google.protobuf.StringValue
	71,  // 251: kk.kkcs.apirequest.SDKRequestInitEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 252: kk.kkcs.apirequest.SDKRequestInitDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 253: kk.kkcs.apirequest.SDKRequestInitDecrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 254: kk.kkcs.apirequest.SDKRequestInitDecrypt.keyId:type_name -> google.protobuf.StringValue
	71,  // 255: kk.kkcs.apirequest.SDKRequestInitDecrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	71,  // 256: kk.kkcs.apirequest.SDKRequestInitDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 257: kk.kkcs.apirequest.SDKRequestMultipartUpdate.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 258: kk.kkcs.apirequest.SDKRequestMultipartUpdate.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 259: kk.kkcs.apirequest.SDKRequestMultipartUpdate.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 260: kk.kkcs.apirequest.SDKRequestFinalizeEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 261: kk.kkcs.apirequest.SDKRequestFinalizeEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 262: kk.kkcs.apirequest.SDKRequestFinalizeEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 263: kk.kkcs.apirequest.SDKRequestFinalizeDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 264: kk.kkcs.apirequest.SDKRequestFinalizeDecrypt.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 265: kk.kkcs.apirequest.SDKRequestFinalizeDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 266: kk.kkcs.apirequest.SDKRequestDecryptCBC.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 267: kk.kkcs.apirequest.SDKRequestDecryptCBC.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 268: kk.kkcs.apirequest.SDKRequestDecryptCBC.keyId:type_name -> google.protobuf.StringValue
	71,  // 269: kk.kkcs.apirequest.SDKRequestDecryptCBC.keyVersion:type_name -> google.protobuf.UInt32Value
	71,  // 270: kk.kkcs.apirequest.SDKRequestDecryptCBC.sequenceId:type_name -> google.protobuf.UInt32Value
	73,  // 271: kk.kkcs.apirequest.SDKRequestDecryptCBC.isLastchunk:type_name -> google.protobuf.BoolValue
	71,  // 272: kk.kkcs.apirequest.SDKRequestDecryptCBC.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 273: kk.kkcs.apirequest.SDKRequestInitMACGenerate.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 274: kk.kkcs.apirequest.SDKRequestInitMACGenerate.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 275: kk.kkcs.apirequest.SDKRequestInitMACGenerate.keyId:type_name -> google.protobuf.StringValue
	71,  // 276: kk.kkcs.apirequest.SDKRequestInitMACGenerate.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 277: kk.kkcs.apirequest.SDKRequestInitMACVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 278: kk.kkcs.apirequest.SDKRequestInitMACVerify.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 279: kk.kkcs.apirequest.SDKRequestInitMACVerify.keyId:type_name -> google.protobuf.StringValue
	71,  // 280: kk.kkcs.apirequest.SDKRequestInitMACVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 281: kk.kkcs.apirequest.SDKRequestMultipartMACUpdate.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 282: kk.kkcs.apirequest.SDKRequestMultipartMACUpdate.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 283: kk.kkcs.apirequest.SDKRequestMultipartMACUpdate.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 284: kk.kkcs.apirequest.SDKRequestFinalizeMACGenerate.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 285: kk.kkcs.apirequest.SDKRequestFinalizeMACGenerate.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 286: kk.kkcs.apirequest.SDKRequestFinalizeMACGenerate.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 287: kk.kkcs.apirequest.SDKRequestFinalizeMACVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 288: kk.kkcs.apirequest.SDKRequestFinalizeMACVerify.slotId:type_name -> google.protobuf.UInt32Value
	71,  // 289: kk.kkcs.apirequest.SDKRequestFinalizeMACVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 290: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 291: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 292: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.keyId:type_name -> google.protobuf.StringValue
	72,  // 293: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.plaintextInputFile:type_name -> google.protobuf.StringValue
	72,  // 294: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.ciphertextOutputFile:type_name -> google.protobuf.StringValue
	71,  // 295: kk.kkcs.apirequest.SDKRequestMultipartEncrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 296: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 297: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 298: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.keyId:type_name -> google.protobuf.StringValue
	71,  // 299: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	72,  // 300: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.ciphertextInputFile:type_name -> google.protobuf.StringValue
	72,  // 301: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.plaintextOutputFile:type_name -> google.protobuf.StringValue
	71,  // 302: kk.kkcs.apirequest.SDKRequestMultipartDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 303: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 304: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 305: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate.keyId:type_name -> google.protobuf.StringValue
	72,  // 306: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate.inputFilename:type_name -> google.protobuf.StringValue
	71,  // 307: kk.kkcs.apirequest.SDKRequestMultipartHMACGenerate.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 308: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 309: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify.slotId:type_name -> google.protobuf.UInt32Value
	72,  // 310: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify.keyId:type_name -> google.protobuf.StringValue
	72,  // 311: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify.inputFilename:type_name -> google.protobuf.StringValue
	71,  // 312: kk.kkcs.apirequest.SDKRequestMultipartHMACVerify.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 313: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt.sessionToken:type_name -> google.protobuf.StringValue
	71,  // 314: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt.partitionId:type_name -> google.protobuf.UInt32Value
	72,  // 315: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt.keyId:type_name -> google.protobuf.StringValue
	72,  // 316: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt.ciphertextInputFile:type_name -> google.protobuf.StringValue
	72,  // 317: kk.kkcs.apirequest.SDKRequestOfflineEncryptionDecrypt.plaintextOutputFile:type_name -> google.protobuf.StringValue
	72,  // 318: kk.kkcs.apirequest.SDKRequestOfflineEncrypt.plaintextInputFile:type_name -> google.protobuf.StringValue
	72,  // 319: kk.kkcs.apirequest.SDKRequestOfflineEncrypt.ciphertextOutputFile:type_name -> google.protobuf.StringValue
	72,  // 320: kk.kkcs.apirequest.SDKRequestOfflineEncrypt.publicKeyOrCert:type_name -> google.protobuf.StringValue
	72,  // 321: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.Destination.permanentKeyId:type_name -> google.protobuf.StringValue
	72,  // 322: kk.kkcs.apirequest.APIRequestE2EEReencryptFromSessionKeyToPermanentKey.Destination.algo:type_name -> google.protobuf.StringValue
	72,  // 323: kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith.permanentKeyId:type_name -> google.protobuf.StringValue
	71,  // 324: kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith.keyVersion:type_name -> google.protobuf.UInt32Value
	72,  // 325: kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith.algo:type_name -> google.protobuf.StringValue
	39,  // 326: kk.kkcs.apirequest.APIRequestE2EECompare.Comparewith.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestE2EECiphertext
	72,  // 327: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 328: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.encryptedClientKey:type_name -> google.protobuf.StringValue
	72,  // 329: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.encryptedClientKeyMetadata:type_name -> google.protobuf.StringValue
	72,  // 330: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.algo:type_name -> google.protobuf.StringValue
	72,  // 331: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.permanentKeyId:type_name -> google.protobuf.StringValue
	71,  // 332: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.keyVersion:type_name -> google.protobuf.UInt32Value
	39,  // 333: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Source.ciphertext:type_name -> kk.kkcs.apirequest.APIRequestE2EECiphertext
	72,  // 334: kk.kkcs.apirequest.APIRequestE2EEReencryptFromPermanentKeyToClientKey.Destination.clientKeyAlgo:type_name -> google.protobuf.StringValue
	72,  // 335: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source.wrappingKeyId:type_name -> google.protobuf.StringValue
	72,  // 336: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source.encryptedClientKey:type_name -> google.protobuf.StringValue
	72,  // 337: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source.encryptedClientKeyMetadata:type_name -> google.protobuf.StringValue
	72,  // 338: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Source.algo:type_name -> google.protobuf.StringValue
	72,  // 339: kk.kkcs.apirequest.APIRequestE2EEEncryptToClientKey.Destination.clientKeyAlgo:type_name -> google.protobuf.StringValue
	340, // [340:340] is the sub-list for method output_type
	340, // [340:340] is the sub-list for method input_type
	340, // [340:340] is the sub-list for extension type_name
	340, // [340:340] is the sub-list for extension extendee
	0,   // [0:340] is the sub-list for field type_name
}

func init() { file_APIRequest_proto_init() }
func file_APIRequest_proto_init() {
	if File_APIRequest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_APIRequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestRefreshSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestGenerateMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleVerifyMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestVerifyMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleReEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestReEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleTokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestTokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestDetokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestCertificateSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestCertificateVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestRNG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestUnseal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestGetSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredGenerateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredGenerateKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredGenerateMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredVerifyMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredTokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredSeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredUnseal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleAppstoredDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestSingleDetokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestAppstoredDetokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2EESourceCipher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEReencryptFromSessionKeyToPermanentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EECiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EECompare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEReencryptFromPermanentKeyToClientKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEDecryptFromSessionKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEEncryptToClientKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestGeneral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestInitEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestInitDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestFinalizeEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestFinalizeDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestDecryptCBC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestInitMACGenerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestInitMACVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartMACUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestFinalizeMACGenerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestFinalizeMACVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartHMACGenerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestMultipartHMACVerify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestSealForTransit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestUnSealFromTransit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestOfflineEncryptionDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDKRequestOfflineEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEReencryptFromSessionKeyToPermanentKey_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EECompare_Comparewith); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEReencryptFromPermanentKeyToClientKey_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEEncryptToClientKey_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_APIRequest_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequestE2EEEncryptToClientKey_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_APIRequest_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*SDKRequestConnection_ClientCertificatePath)(nil),
		(*SDKRequestConnection_ClientCertificatePEM)(nil),
		(*SDKRequestConnection_PrivateKeyPath)(nil),
		(*SDKRequestConnection_PrivateKeyPEM)(nil),
	}
	file_APIRequest_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_APIRequest_proto_msgTypes[60].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_APIRequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_APIRequest_proto_goTypes,
		DependencyIndexes: file_APIRequest_proto_depIdxs,
		MessageInfos:      file_APIRequest_proto_msgTypes,
	}.Build()
	File_APIRequest_proto = out.File
	file_APIRequest_proto_rawDesc = nil
	file_APIRequest_proto_goTypes = nil
	file_APIRequest_proto_depIdxs = nil
}
